--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 14.0 cbx_cycloneii 2014:06:17:18:06:03:SJ cbx_lpm_add_sub 2014:06:17:18:06:03:SJ cbx_lpm_compare 2014:06:17:18:06:03:SJ cbx_lpm_decode 2014:06:17:18:06:03:SJ cbx_mgl 2014:06:17:18:10:38:SJ cbx_stratix 2014:06:17:18:06:03:SJ cbx_stratixii 2014:06:17:18:06:03:SJ  VERSION_END


-- Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode590w[1..0]	: WIRE;
	w_anode599w[3..0]	: WIRE;
	w_anode616w[3..0]	: WIRE;
	w_anode626w[3..0]	: WIRE;
	w_anode636w[3..0]	: WIRE;
	w_anode646w[3..0]	: WIRE;
	w_anode656w[3..0]	: WIRE;
	w_anode666w[3..0]	: WIRE;
	w_anode676w[3..0]	: WIRE;
	w_anode688w[1..0]	: WIRE;
	w_anode695w[3..0]	: WIRE;
	w_anode706w[3..0]	: WIRE;
	w_anode716w[3..0]	: WIRE;
	w_anode726w[3..0]	: WIRE;
	w_anode736w[3..0]	: WIRE;
	w_anode746w[3..0]	: WIRE;
	w_anode756w[3..0]	: WIRE;
	w_anode766w[3..0]	: WIRE;
	w_data588w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode766w[3..3], w_anode756w[3..3], w_anode746w[3..3], w_anode736w[3..3], w_anode726w[3..3], w_anode716w[3..3], w_anode706w[3..3], w_anode695w[3..3]), ( w_anode676w[3..3], w_anode666w[3..3], w_anode656w[3..3], w_anode646w[3..3], w_anode636w[3..3], w_anode626w[3..3], w_anode616w[3..3], w_anode599w[3..3]));
	w_anode590w[] = ( (w_anode590w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode599w[] = ( (w_anode599w[2..2] & (! w_data588w[2..2])), (w_anode599w[1..1] & (! w_data588w[1..1])), (w_anode599w[0..0] & (! w_data588w[0..0])), w_anode590w[1..1]);
	w_anode616w[] = ( (w_anode616w[2..2] & (! w_data588w[2..2])), (w_anode616w[1..1] & (! w_data588w[1..1])), (w_anode616w[0..0] & w_data588w[0..0]), w_anode590w[1..1]);
	w_anode626w[] = ( (w_anode626w[2..2] & (! w_data588w[2..2])), (w_anode626w[1..1] & w_data588w[1..1]), (w_anode626w[0..0] & (! w_data588w[0..0])), w_anode590w[1..1]);
	w_anode636w[] = ( (w_anode636w[2..2] & (! w_data588w[2..2])), (w_anode636w[1..1] & w_data588w[1..1]), (w_anode636w[0..0] & w_data588w[0..0]), w_anode590w[1..1]);
	w_anode646w[] = ( (w_anode646w[2..2] & w_data588w[2..2]), (w_anode646w[1..1] & (! w_data588w[1..1])), (w_anode646w[0..0] & (! w_data588w[0..0])), w_anode590w[1..1]);
	w_anode656w[] = ( (w_anode656w[2..2] & w_data588w[2..2]), (w_anode656w[1..1] & (! w_data588w[1..1])), (w_anode656w[0..0] & w_data588w[0..0]), w_anode590w[1..1]);
	w_anode666w[] = ( (w_anode666w[2..2] & w_data588w[2..2]), (w_anode666w[1..1] & w_data588w[1..1]), (w_anode666w[0..0] & (! w_data588w[0..0])), w_anode590w[1..1]);
	w_anode676w[] = ( (w_anode676w[2..2] & w_data588w[2..2]), (w_anode676w[1..1] & w_data588w[1..1]), (w_anode676w[0..0] & w_data588w[0..0]), w_anode590w[1..1]);
	w_anode688w[] = ( (w_anode688w[0..0] & data_wire[3..3]), enable_wire);
	w_anode695w[] = ( (w_anode695w[2..2] & (! w_data588w[2..2])), (w_anode695w[1..1] & (! w_data588w[1..1])), (w_anode695w[0..0] & (! w_data588w[0..0])), w_anode688w[1..1]);
	w_anode706w[] = ( (w_anode706w[2..2] & (! w_data588w[2..2])), (w_anode706w[1..1] & (! w_data588w[1..1])), (w_anode706w[0..0] & w_data588w[0..0]), w_anode688w[1..1]);
	w_anode716w[] = ( (w_anode716w[2..2] & (! w_data588w[2..2])), (w_anode716w[1..1] & w_data588w[1..1]), (w_anode716w[0..0] & (! w_data588w[0..0])), w_anode688w[1..1]);
	w_anode726w[] = ( (w_anode726w[2..2] & (! w_data588w[2..2])), (w_anode726w[1..1] & w_data588w[1..1]), (w_anode726w[0..0] & w_data588w[0..0]), w_anode688w[1..1]);
	w_anode736w[] = ( (w_anode736w[2..2] & w_data588w[2..2]), (w_anode736w[1..1] & (! w_data588w[1..1])), (w_anode736w[0..0] & (! w_data588w[0..0])), w_anode688w[1..1]);
	w_anode746w[] = ( (w_anode746w[2..2] & w_data588w[2..2]), (w_anode746w[1..1] & (! w_data588w[1..1])), (w_anode746w[0..0] & w_data588w[0..0]), w_anode688w[1..1]);
	w_anode756w[] = ( (w_anode756w[2..2] & w_data588w[2..2]), (w_anode756w[1..1] & w_data588w[1..1]), (w_anode756w[0..0] & (! w_data588w[0..0])), w_anode688w[1..1]);
	w_anode766w[] = ( (w_anode766w[2..2] & w_data588w[2..2]), (w_anode766w[1..1] & w_data588w[1..1]), (w_anode766w[0..0] & w_data588w[0..0]), w_anode688w[1..1]);
	w_data588w[2..0] = data_wire[2..0];
END;
--VALID FILE
